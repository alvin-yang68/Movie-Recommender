#  the test(forecast) data frame with the forecasts filled in
h <- nrow(test)
tr <- train[nrow(train) - (52:1) + 1,]
tr[is.na(tr)] <- 0
test[,2:ncol(test)]  <- tr[1:h,2:ncol(test)]
test
}
linear_model = function(train, test) {
num_forecasts = nrow(test)
train[is.na(train)] = 0
# Forecast using linear regression model per store
for (j in 2:ncol(train)) {
s = ts(train[, j], frequency = 52)
model = tslm(s ~ trend + season)
fc = forecast(model, h = num_forecasts)
test[, j] = as.numeric(fc$mean)
}
return(test)
}
shift = function(dept_preds) {
# This function circularly shift a fraction of the sales from weeks 48 through
# 52 into the next week if the sales of holiday weeks are 10% greater than
# the baseline (i.e. non-holiday weeks)
shift = 1
threshold = 1.1
idx = week(dept_preds$Date) %in% 48:52
holiday = dept_preds[idx, 2:46]
baseline = mean(rowMeans(holiday[c(1,5), ], na.rm = TRUE))
surge = mean(rowMeans(holiday[2:4, ], na.rm=TRUE))
holiday[is.na(holiday)] = 0
if(is.finite(surge/baseline) & surge/baseline > threshold){
shifted.sales = ((7-shift)/7) * holiday
shifted.sales[2:5, ] = shifted.sales[2:5, ] + (shift/7) * holiday[1:4, ]
shifted.sales[1, ] = holiday[1, ]
dept_preds[idx, 2:46] = shifted.sales
}
return(dept_preds)
}
update_forecast = function(test_month, dept_preds, dept) {
# Convert forecast with shape (num_test_dates, num_store) to a dataframe
# with Date, Store, Weekly_Price columns
dept_preds = gather(dept_preds, Store, Weekly_Price, -Date, convert = TRUE)
# Obtain the index where test_month$Dept equals dept
pred.d.idx = test_month$Dept == dept
# Rearrange dept_preds to match the order found in test_month
pred.d = test_month[pred.d.idx, c('Store', 'Date')] %>%
left_join(dept_preds, by = c('Store', 'Date'))
test_month$Weekly_Pred[pred.d.idx] = pred.d$Weekly_Price
return(test_month)
}
mypredict = function() {
##### Create train and test time-series ######
if (t > 1) {
# Append the previous periods test data to the current training data
train <<- train %>% add_row(new_train)
}
# Filter test dataframe for the month that do need predictions
# Backtesting starts from March 2011
start_date = ymd("2011-03-01") %m+% months(2 * (t - 1))
end_date = ymd("2011-05-01") %m+% months(2 * (t - 1))
test_month = test %>% filter(Date >= start_date & Date < end_date) %>%
add_column(Weekly_Pred = NA)
# Get the dates for test dataframe
test_dates = unique(test_month$Date)
num_test_dates = length(test_dates)
# No need to consider stores that do not need prediction
all_stores = unique(test_month$Store)
num_stores = length(all_stores)
# No need to consider departments that do not need prediction
test_depts = unique(test_month$Dept)
# Create the structure of test dataframe with
# the shape (num_test_dates, num_stores)
test_frame = data.frame(
Date = rep(test_dates, num_stores),
Store = rep(all_stores, each = num_test_dates)
)
# Create the structure of training dataframe with
# the shape (num_train_dates, num_stores)
train_dates = unique(train$Date)
num_train_dates = length(train_dates)
train_frame = data.frame(
Date = rep(train_dates, num_stores),
Store = rep(all_stores, each = num_train_dates)
)
##### Perform individual forecasts for each department ######
for (dept in test_depts) {
# Extract the current department from the training data
train_dept_ts = train %>% filter(Dept == dept) %>%
select(Store, Date, Weekly_Sales)
# Reformat train_dept_ts so that it has a shape (num_train_dates, num_stores)
# Each column is a weekly time-series for a store's department
train_dept_ts = train_frame %>%
left_join(train_dept_ts, by = c("Date", "Store")) %>%
spread(Store, Weekly_Sales)
# Create a similar dataframe to hold the forecast on the dates in the
# testing window
test_dept_ts = test_frame %>% mutate(Weekly_Sales = 0) %>%
spread(Store, Weekly_Sales)
# Model fitting/forecasting
# f_linear = linear_model(train_dept_ts, test_dept_ts)
f_linear = seasonal.naive(train_dept_ts, test_dept_ts)
# Post-processing
if (t == 5) f_linear = shift(f_linear)
test_month = update_forecast(test_month, f_linear, dept)
}
test_month = test_month %>% select(-IsHoliday)
return(test_month)
}
# read in train / test dataframes
train <- readr::read_csv('train_ini.csv')
test <- readr::read_csv('test.csv')
# save weighted mean absolute error WMAE
num_folds <- 10
wae <- rep(0, num_folds)
for (t in 1:num_folds) {
# *** THIS IS YOUR PREDICTION FUNCTION ***
test_pred <- mypredict()
# load fold file
fold_file <- paste0('fold_', t, '.csv')
new_train <- readr::read_csv(fold_file,
col_types = cols())
# extract predictions matching up to the current fold
scoring_tbl <- new_train %>%
left_join(test_pred, by = c('Date', 'Store', 'Dept'))
# compute WMAE
actuals <- scoring_tbl$Weekly_Sales
preds <- scoring_tbl$Weekly_Pred
preds[is.na(preds)] <- 0
weights <- if_else(scoring_tbl$IsHoliday, 5, 1)
wae[t] <- sum(weights * abs(actuals - preds)) / sum(weights)
}
print(wae)
mean(wae)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(recommenderlab)
library(DT)
library(data.table)
library(reshape2)
?evaluate
i = paste0('u', ratings$UserID)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(recommenderlab)
library(DT)
library(data.table)
library(reshape2)
# use colClasses = 'NULL' to skip columns
ratings = read.csv('ratings.dat',
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
print(ratings)
users = read.csv('users.dat',
sep = ':', header = FALSE)
users = users[, -c(2,4,6,8)] # skip columns
colnames(users) = c('UserID', 'Gender', 'Age', 'Occupation', 'Zip-code')
print(users)
movies = readLines('movies.dat')
movies = strsplit(movies, split = "::", fixed = TRUE, useBytes = TRUE)
movies = matrix(unlist(movies), ncol = 3, byrow = TRUE)
movies = data.frame(movies, stringsAsFactors = FALSE)
colnames(movies) = c('MovieID', 'Title', 'Genres')
movies$MovieID = as.integer(movies$MovieID)
# convert accented characters
movies$Title = iconv(movies$Title, "latin1", "UTF-8")
# extract year
movies$Year = as.numeric(unlist(
lapply(movies$Title, function(x) substr(x, nchar(x)-4, nchar(x)-1))))
print(movies)
i = paste0('u', ratings$UserID)
j = paste0('m', ratings$MovieID)
x = ratings$Rating
tmp = data.frame(i, j, x, stringsAsFactors = TRUE)
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
range(ratings$MovieID)
length(unique(ratings$MovieID))
range(ratings$UserID)
length(unique(ratings$UserID))
dim(Rmat)
type(Rmat)
typeof(Rmat)
knitr::opts_chunk$set(echo = TRUE)
genres = as.data.frame(movies$Genres, stringsAsFactors=FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(recommenderlab)
library(DT)
library(data.table)
library(reshape2)
set.seed(5356)
# use colClasses = 'NULL' to skip columns
ratings = read.csv('ratings.dat',
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
print(head(ratings))
users = read.csv('users.dat',
sep = ':', header = FALSE)
users = users[, -c(2,4,6,8)] # skip columns
colnames(users) = c('UserID', 'Gender', 'Age', 'Occupation', 'Zip-code')
print(head(users))
movies = readLines('movies.dat')
movies = strsplit(movies, split = "::", fixed = TRUE, useBytes = TRUE)
movies = matrix(unlist(movies), ncol = 3, byrow = TRUE)
movies = data.frame(movies, stringsAsFactors = FALSE)
colnames(movies) = c('MovieID', 'Title', 'Genres')
movies$MovieID = as.integer(movies$MovieID)
# convert accented characters
movies$Title = iconv(movies$Title, "latin1", "UTF-8")
# extract year
movies$Year = as.numeric(unlist(
lapply(movies$Title, function(x) substr(x, nchar(x)-4, nchar(x)-1))))
print(head(movies))
genres = as.data.frame(movies$Genres, stringsAsFactors=FALSE)
tmp = as.data.frame(tstrsplit(genres[,1], '[|]',
type.convert=TRUE),
stringsAsFactors=FALSE)
genre_list = c("Action", "Adventure", "Animation",
"Children's", "Comedy", "Crime",
"Documentary", "Drama", "Fantasy",
"Film-Noir", "Horror", "Musical",
"Mystery", "Romance", "Sci-Fi",
"Thriller", "War", "Western")
m = length(genre_list)
genre_matrix = matrix(0, nrow(movies), length(genre_list))
for(i in 1:nrow(tmp)){
genre_matrix[i,genre_list %in% tmp[i,]]=1
}
colnames(genre_matrix) = genre_list
genres
names(genres)
head(genres)
head(genre_matrix)
genres = as.data.frame(movies$Genres, stringsAsFactors=FALSE)
tmp = as.data.frame(tstrsplit(genres[,1], '[|]',
type.convert=TRUE),
stringsAsFactors=FALSE)
genre_list = c("Action", "Adventure", "Animation",
"Children's", "Comedy", "Crime",
"Documentary", "Drama", "Fantasy",
"Film-Noir", "Horror", "Musical",
"Mystery", "Romance", "Sci-Fi",
"Thriller", "War", "Western")
m = length(genre_list)
genre_matrix = matrix(0, nrow(movies), length(genre_list))
for(i in 1:nrow(tmp)){
genre_matrix[i,genre_list %in% tmp[i,]]=1
}
colnames(genre_matrix) = genre_list
genre_matrix = cbind(movies$MovieID, genre_matrix)
head(genre_matrix)
genres = as.data.frame(movies$Genres, stringsAsFactors=FALSE)
tmp = as.data.frame(tstrsplit(genres[,1], '[|]',
type.convert=TRUE),
stringsAsFactors=FALSE)
genre_list = c("Action", "Adventure", "Animation",
"Children's", "Comedy", "Crime",
"Documentary", "Drama", "Fantasy",
"Film-Noir", "Horror", "Musical",
"Mystery", "Romance", "Sci-Fi",
"Thriller", "War", "Western")
m = length(genre_list)
genre_matrix = matrix(0, nrow(movies), length(genre_list))
for(i in 1:nrow(tmp)){
genre_matrix[i,genre_list %in% tmp[i,]]=1
}
colnames(genre_matrix) = genre_list
genre_matrix = cbind(movies$MovieID, genre_matrix)
remove("tmp", "genres")
typeof(genre_matrix)
head(data.frame(genre_matrix))
genres = as.data.frame(movies$Genres, stringsAsFactors=FALSE)
tmp = as.data.frame(tstrsplit(genres[,1], '[|]',
type.convert=TRUE),
stringsAsFactors=FALSE)
genre_list = c("Action", "Adventure", "Animation",
"Children's", "Comedy", "Crime",
"Documentary", "Drama", "Fantasy",
"Film-Noir", "Horror", "Musical",
"Mystery", "Romance", "Sci-Fi",
"Thriller", "War", "Western")
m = length(genre_list)
genre_matrix = matrix(0, nrow(movies), length(genre_list))
for(i in 1:nrow(tmp)){
genre_matrix[i,genre_list %in% tmp[i,]]=1
}
colnames(genre_matrix) = c("Title", genre_list)
genres = as.data.frame(movies$Genres, stringsAsFactors=FALSE)
tmp = as.data.frame(tstrsplit(genres[,1], '[|]',
type.convert=TRUE),
stringsAsFactors=FALSE)
genre_list = c("Action", "Adventure", "Animation",
"Children's", "Comedy", "Crime",
"Documentary", "Drama", "Fantasy",
"Film-Noir", "Horror", "Musical",
"Mystery", "Romance", "Sci-Fi",
"Thriller", "War", "Western")
m = length(genre_list)
genre_matrix = matrix(0, nrow(movies), length(genre_list))
for(i in 1:nrow(tmp)){
genre_matrix[i,genre_list %in% tmp[i,]]=1
}
genre_matrix = cbind(movies$Title, genre_matrix)
colnames(genre_matrix) = c("Title", genre_list)
remove("tmp", "genres")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(recommenderlab)
library(DT)
library(data.table)
library(reshape2)
set.seed(5356)
# use colClasses = 'NULL' to skip columns
ratings = read.csv('ratings.dat',
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
print(head(ratings))
users = read.csv('users.dat',
sep = ':', header = FALSE)
users = users[, -c(2,4,6,8)] # skip columns
colnames(users) = c('UserID', 'Gender', 'Age', 'Occupation', 'Zip-code')
print(head(users))
movies = readLines('movies.dat')
movies = strsplit(movies, split = "::", fixed = TRUE, useBytes = TRUE)
movies = matrix(unlist(movies), ncol = 3, byrow = TRUE)
movies = data.frame(movies, stringsAsFactors = FALSE)
colnames(movies) = c('MovieID', 'Title', 'Genres')
movies$MovieID = as.integer(movies$MovieID)
# convert accented characters
movies$Title = iconv(movies$Title, "latin1", "UTF-8")
# extract year
movies$Year = as.numeric(unlist(
lapply(movies$Title, function(x) substr(x, nchar(x)-4, nchar(x)-1))))
print(head(movies))
genres = as.data.frame(movies$Genres, stringsAsFactors=FALSE)
tmp = as.data.frame(tstrsplit(genres[,1], '[|]',
type.convert=TRUE),
stringsAsFactors=FALSE)
genre_list = c("Action", "Adventure", "Animation",
"Children's", "Comedy", "Crime",
"Documentary", "Drama", "Fantasy",
"Film-Noir", "Horror", "Musical",
"Mystery", "Romance", "Sci-Fi",
"Thriller", "War", "Western")
m = length(genre_list)
genre_matrix = matrix(0, nrow(movies), length(genre_list))
for(i in 1:nrow(tmp)){
genre_matrix[i,genre_list %in% tmp[i,]]=1
}
genre_matrix = cbind(movies$Title, genre_matrix)
colnames(genre_matrix) = c("Title", genre_list)
remove("tmp", "genres")
head(genre_matrix)
genre_matrix["Toy Story (1995)"]
?hashmap
?ddply
?aggregate
pop_matrix = aggregate(Title~., data=genre_matrix, FUN=sum)
head(genre_matrix)
genres = as.data.frame(movies$Genres, stringsAsFactors=FALSE)
tmp = as.data.frame(tstrsplit(genres[,1], '[|]',
type.convert=TRUE),
stringsAsFactors=FALSE)
genre_list = c("Action", "Adventure", "Animation",
"Children's", "Comedy", "Crime",
"Documentary", "Drama", "Fantasy",
"Film-Noir", "Horror", "Musical",
"Mystery", "Romance", "Sci-Fi",
"Thriller", "War", "Western")
m = length(genre_list)
genre_matrix = matrix(0, nrow(movies), length(genre_list))
for(i in 1:nrow(tmp)){
genre_matrix[i,genre_list %in% tmp[i,]]=1
}
#genre_matrix = cbind(movies$Title, genre_matrix)
#colnames(genre_matrix) = c("Title", genre_list)
remove("tmp", "genres")
head(genre_matrix)
genres = as.data.frame(movies$Genres, stringsAsFactors=FALSE)
tmp = as.data.frame(tstrsplit(genres[,1], '[|]',
type.convert=TRUE),
stringsAsFactors=FALSE)
genre_list = c("Action", "Adventure", "Animation",
"Children's", "Comedy", "Crime",
"Documentary", "Drama", "Fantasy",
"Film-Noir", "Horror", "Musical",
"Mystery", "Romance", "Sci-Fi",
"Thriller", "War", "Western")
m = length(genre_list)
genre_matrix = matrix(0, nrow(movies), length(genre_list))
for(i in 1:nrow(tmp)){
genre_matrix[i,genre_list %in% tmp[i,]]=1
}
genre_matrix = cbind(movies$Title, data.frame(genre_matrix))
colnames(genre_matrix) = c("Title", genre_list)
remove("tmp", "genres")
head(genre_matrix)
pop_matrix = aggregate(Title~., data=genre_matrix, FUN=sum)
genre_matrix[1,2]
pop_matrix = aggregate(Title~-Title, data=genre_matrix, FUN=sum)
?~
)
help("~")
pop_matrix = aggregate(Title~.-Title, data=genre_matrix, FUN=sum)
Title ~ .
Title ~ . - Title
~
sd
pop_matrix = aggregate(Title~Action, data=genre_matrix, FUN=sum)
pop_matrix = aggregate(Action~Title, data=genre_matrix, FUN=sum)
pop_matrix = aggregate(~Title, data=genre_matrix, FUN=sum)
pop_matrix = aggregate(.~Title, data=genre_matrix, FUN=sum)
head(pop_matrix)
summary(pop_matrix)
pop_matrix = aggregate(.-Title~Title, data=genre_matrix, FUN=sum)
pop_matrix = aggregate(-Title~Title, data=genre_matrix, FUN=sum)
pop_matrix = aggregate(.~Title, data=genre_matrix, FUN=sum)
pop_matrix = ddply(genre_matrix,"Title",numcolwise(sum))
?ddply
library(plyr)
library(dplyr)
pop_matrix = ddply(genre_matrix,"Title",numcolwise(sum))
summary(pop_matrix)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(recommenderlab)
library(DT)
library(data.table)
library(reshape2)
set.seed(5356)
# use colClasses = 'NULL' to skip columns
ratings = read.csv('ratings.dat',
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
print(head(ratings))
users = read.csv('users.dat',
sep = ':', header = FALSE)
users = users[, -c(2,4,6,8)] # skip columns
colnames(users) = c('UserID', 'Gender', 'Age', 'Occupation', 'Zip-code')
print(head(users))
movies = readLines('movies.dat')
movies = strsplit(movies, split = "::", fixed = TRUE, useBytes = TRUE)
movies = matrix(unlist(movies), ncol = 3, byrow = TRUE)
movies = data.frame(movies, stringsAsFactors = FALSE)
colnames(movies) = c('MovieID', 'Title', 'Genres')
movies$MovieID = as.integer(movies$MovieID)
# convert accented characters
movies$Title = iconv(movies$Title, "latin1", "UTF-8")
# extract year
movies$Year = as.numeric(unlist(
lapply(movies$Title, function(x) substr(x, nchar(x)-4, nchar(x)-1))))
print(head(movies))
genres = as.data.frame(movies$Genres, stringsAsFactors=FALSE)
tmp = as.data.frame(tstrsplit(genres[,1], '[|]',
type.convert=TRUE),
stringsAsFactors=FALSE)
genre_list = c("Action", "Adventure", "Animation",
"Children's", "Comedy", "Crime",
"Documentary", "Drama", "Fantasy",
"Film-Noir", "Horror", "Musical",
"Mystery", "Romance", "Sci-Fi",
"Thriller", "War", "Western")
m = length(genre_list)
genre_matrix = matrix(0, nrow(movies), length(genre_list))
for(i in 1:nrow(tmp)){
genre_matrix[i,genre_list %in% tmp[i,]]=1
}
colnames(genre_matrix) = genre_list
remove("tmp", "genres")
c("Title",
library(shiny); source('C:/Users/User/OneDrive/UIUC/STAT 542 (PSL)/Projects/Project 4/runUI.R')
library(shiny); source('C:/Users/User/OneDrive/UIUC/STAT 542 (PSL)/Projects/Project 4/runUI.R')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='alvin-yang68', token='653B76EDDA27A9CF0991F3B47F9CF15D', secret='cLzUa59lFJYHIe54b5H9wP+ABeePmLwGBNBMAuj0')
library(rsconnect)
shiny::runApp('C:/Users/User/OneDrive/UIUC/STAT 542 (PSL)/Projects/Project 4')
load("C:/Users/User/OneDrive/UIUC/STAT 542 (PSL)/Projects/Project 4/System2.rda")
runApp('C:/Users/User/OneDrive/GitHub/Movie-Recommender')
runApp('C:/Users/User/OneDrive/GitHub/Movie-Recommender')
runApp('C:/Users/User/OneDrive/GitHub/Movie-Recommender')
runApp('C:/Users/User/OneDrive/GitHub/Movie-Recommender')
rsconnect::deployApp('C:\Users\User\OneDrive\GitHub\Movie-Recommender')
rsconnect::deployApp('C:/Users/User/OneDrive/GitHub/Movie-Recommender')
runApp('C:/Users/User/OneDrive/GitHub/Movie-Recommender')
rsconnect::showLogs()
rsconnect::showLogs('C:\Users\User\OneDrive\GitHub\Movie-Recommender')
rsconnect::showLogs('C:/Users/User/OneDrive/GitHub/Movie-Recommender')
shiny::runApp('C:/Users/User/OneDrive/GitHub/Movie-Recommender')
runApp('C:/Users/User/OneDrive/GitHub/Movie-Recommender')
installed.packages()
%>%
runApp('C:/Users/User/OneDrive/GitHub/Movie-Recommender')
runApp('C:/Users/User/OneDrive/GitHub/Movie-Recommender')
install.packages("dplyr")
runApp('C:/Users/User/OneDrive/GitHub/Movie-Recommender')
install.packages("dplyr")
runApp('C:/Users/User/OneDrive/GitHub/Movie-Recommender')
